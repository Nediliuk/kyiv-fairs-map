import { map } from './data/init-map.js';
import { loadFairSites } from './data/load-fair-sites.js';
import { loadFairZones } from './data/load-fair-zones.js';
import { getCachedSites, setCachedSites, getCachedZones, setCachedZones } from './data/cache-manager.js';
import { assembleFairs } from './logic/fair-assembly.js';
import { renderLayers } from './ui/render-map.js';
import {
  syncMobileDayLabel,
  enableMobileTogglePanel,
} from './ui/mobile/mobile-ui.js';
import { updateOffscreenIndicators } from './logic/offscreen-indicators.js';
import { initMobilePopup } from './ui/mobile/mobile-popups.js';
import { initFeedback } from './logic/feedback.js';
import { VegetableLoader } from './logic/vegetable-loader.js';
import { initAboutProject } from './logic/about-project.js'; // ‚Üê –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –æ–≤–æ—á—ñ–≤
let vegetableLoader;

// –í–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω–∞
function updateIsMobile() {
  window.isMobile = window.innerWidth <= 768;
}
updateIsMobile();
window.addEventListener('resize', updateIsMobile);

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è UI (–¥–µ—Å–∫—Ç–æ–ø / –º–æ–±—ñ–ª—å–Ω–∏–π)
async function loadUI() {
  const uiPath = window.isMobile
    ? './ui/mobile/mobile-ui.html'
    : './ui/ui.html';
  const html = await fetch(uiPath).then((r) => r.text());
  const uiContainer = document.getElementById('ui-container');
  uiContainer.innerHTML = html;

  console.log('[UI loaded]');

  initMobilePopup();
  initFeedback();
  initAboutProject(); // ‚Üê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø "–ü–†–û –ü–†–û–ï–ö–¢"

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ–≤–æ—á—ñ–≤ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è UI
  console.log('ü•ï –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–∞–¥–µ—Ä –∑ –æ–≤–æ—á–∞–º–∏...');
  vegetableLoader = new VegetableLoader();
  vegetableLoader.start();
  console.log('‚úÖ –õ–æ–∞–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π, –ø–æ–∫–∏ –∫–∞—Ä—Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è');
}

// –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ UI —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–∞–¥–µ—Ä
loadUI();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö –∑ API —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
async function loadFreshData() {
  console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ API...');
  const [sites, zones] = await Promise.all([
    loadFairSites(),
    loadFairZones(),
  ]);
  
  setCachedSites(sites);
  setCachedZones(zones);
  
  return { sites, zones };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
async function updateDataInBackground(currentFairs) {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö...');
    const { sites, zones } = await loadFreshData();
    
    const newFairs = assembleFairs({ sites, zones });
    
    if (newFairs.length !== currentFairs.length) {
      console.log('‚ú® –ó–Ω–∞–π–¥–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —è—Ä–º–∞—Ä–∫–∏');
    }
    
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ–Ω—ñ:', err);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
map.on('load', async () => {
  try {
    let sites, zones, usingCache = false;
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    const cachedSites = await getCachedSites();
    const cachedZones = await getCachedZones();
    
    if (cachedSites && cachedZones) {
      console.log('‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
      sites = cachedSites.data;
      zones = cachedZones.data;
      usingCache = true;
    } else {
      console.log('üì° –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ API (–ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à)');
      const freshData = await loadFreshData();
      sites = freshData.sites;
      zones = freshData.zones;
    }
    
    // –ó–±–∏—Ä–∞—î–º–æ —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –¥–∞–Ω—ñ
    const fairs = assembleFairs({ sites, zones });

    // üìä –ü–û–í–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ó–ù–ê–ß–ï–ù–¨ type_table, goods_type_kd —ñ zone_type
    console.log('üìä –ê–ù–ê–õ–Ü–ó –í–°–Ü–• –ó–ù–ê–ß–ï–ù–¨ –í –ü–û–õ–Ø–• –ó–û–ù–ò:');

    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    const goodsTypeValues = new Set();
    const zoneTypeValues = new Set();
    const typeTableValues = new Set();
    const combinedStats = new Map();

    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ zones
    zones.forEach((rawZone, index) => {
      const props = rawZone.attributes || rawZone.properties || {};
      
      // –ó–±–∏—Ä–∞—î–º–æ type_table
      if (props.type_table !== undefined && props.type_table !== null) {
        typeTableValues.add(props.type_table);
      }
      
      // –ó–±–∏—Ä–∞—î–º–æ goods_type_kd
      if (props.goods_type_kd !== undefined && props.goods_type_kd !== null) {
        goodsTypeValues.add(props.goods_type_kd);
      }
      
      // –ó–±–∏—Ä–∞—î–º–æ zone_type
      if (props.zone_type !== undefined && props.zone_type !== null) {
        zoneTypeValues.add(props.zone_type);
      }
      
      // –ó–±–∏—Ä–∞—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
      const combination = `zone_type:"${props.zone_type || 'null'}" + goods_type_kd:"${props.goods_type_kd || 'null'}" + type_table:"${props.type_table || 'null'}"`;
      combinedStats.set(combination, (combinedStats.get(combination) || 0) + 1);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
      if (index < 5) {
        console.log(`\nüîç –ó–∞–ø–∏—Å ${index}:`);
        console.log(`   type_table: "${props.type_table}" (${typeof props.type_table})`);
        console.log(`   goods_type_kd: "${props.goods_type_kd}" (${typeof props.goods_type_kd})`);
        console.log(`   zone_type: "${props.zone_type}" (${typeof props.zone_type})`);
        console.log(`   –í—Å—ñ –ø–æ–ª—è:`, Object.keys(props));
      }
    });

    // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
    console.log('\nüè∑Ô∏è –¢–ò–ü –¢–ê–ë–õ–ò–¶–Ü type_table:');
    console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${typeTableValues.size}`);
    const sortedTypeTable = Array.from(typeTableValues).sort();
    sortedTypeTable.forEach((value, index) => {
      console.log(`   ${index + 1}. "${value}" (${typeof value})`);
    });

    console.log('\nüõí –í–°–Ü –£–ù–Ü–ö–ê–õ–¨–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø goods_type_kd:');
    console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${goodsTypeValues.size}`);
    const sortedGoodsTypes = Array.from(goodsTypeValues).sort();
    sortedGoodsTypes.forEach((value, index) => {
      console.log(`   ${index + 1}. "${value}" (${typeof value})`);
    });

    console.log('\nüè™ –í–°–Ü –£–ù–Ü–ö–ê–õ–¨–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø zone_type:');
    console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${zoneTypeValues.size}`);
    const sortedZoneTypes = Array.from(zoneTypeValues).sort();
    sortedZoneTypes.forEach((value, index) => {
      console.log(`   ${index + 1}. "${value}" (${typeof value})`);
    });

    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ë–Ü–ù–ê–¶–Ü–ô (zone_type + goods_type_kd + type_table):');
    const sortedCombinations = Array.from(combinedStats.entries())
      .sort((a, b) => b[1] - a[1]) // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é
      .slice(0, 15); // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-15

    sortedCombinations.forEach(([combination, count]) => {
      console.log(`   ${combination}: ${count} —Ä–∞–∑—ñ–≤`);
    });

    console.log('\nüìã –ï–ö–°–ü–û–†–¢ –î–õ–Ø –ö–û–î–£:');
    console.log('// type_table values:');
    console.log('const TYPE_TABLE_VALUES = [');
    sortedTypeTable.forEach(value => {
      console.log(`  "${value}",`);
    });
    console.log('];');

    console.log('\n// goods_type_kd values:');
    console.log('const GOODS_TYPES = [');
    sortedGoodsTypes.forEach(value => {
      console.log(`  "${value}",`);
    });
    console.log('];');

    console.log('\n// zone_type values:');
    console.log('const ZONE_TYPES = [');
    sortedZoneTypes.forEach(value => {
      console.log(`  "${value}",`);
    });
    console.log('];');

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ - —á–∏ —î —â–µ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ–ª—è?
    console.log('\nüîç –Ü–ù–®–Ü –ö–û–†–ò–°–ù–Ü –ü–û–õ–Ø –í –î–ê–ù–ò–• –ó–û–ù–ò:');
    const allFields = new Set();
    zones.slice(0, 20).forEach(rawZone => {
      const props = rawZone.attributes || rawZone.properties || {};
      Object.keys(props).forEach(key => allFields.add(key));
    });

    const interestingFields = Array.from(allFields).filter(field => 
      field.toLowerCase().includes('goods') || 
      field.toLowerCase().includes('type') ||
      field.toLowerCase().includes('category') ||
      field.toLowerCase().includes('name') ||
      field.toLowerCase().includes('descr') ||
      field.toLowerCase().includes('table')
    ).sort();

    console.log('–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ–ª—è:');
    interestingFields.forEach(field => console.log(`   - ${field}`));

    console.log(`\n–í—Å—å–æ–≥–æ –ø–æ–ª—ñ–≤ –≤ –¥–∞–Ω–∏—Ö –∑–æ–Ω–∏: ${allFields.size}`);
    console.log('–í—Å—ñ –ø–æ–ª—è:', Array.from(allFields).sort());

    // –†–µ–Ω–¥–µ—Ä–∏–º–æ —à–∞—Ä–∏ –∫–∞—Ä—Ç–∏
    renderLayers(map, fairs);
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–±—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (window.isMobile) {
      syncMobileDayLabel();
      enableMobileTogglePanel();
    }
    
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á —Ä—É—Ö—É –∫–∞—Ä—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
    map.on('move', () => updateOffscreenIndicators(map, fairs));

    // –ó—É–ø–∏–Ω—è—î–º–æ –ª–æ–∞–¥–µ—Ä —ñ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –π–æ–≥–æ
    console.log('üõë –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞! –ó—É–ø–∏–Ω—è—î–º–æ –ª–æ–∞–¥–µ—Ä...');
    
    if (vegetableLoader) {
      vegetableLoader.stop();
      console.log('‚úÖ –ê–Ω—ñ–º–∞—Ü—ñ—è –æ–≤–æ—á—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞');
    }
    
    const loader = document.getElementById('map-loader');
    if (loader) {
      loader.style.display = 'none';
      console.log('‚úÖ –õ–æ–∞–¥–µ—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
    }
    
    document.body.classList.add('map-ready');
    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏');
    
    // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –∫–µ—à, –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É —Ñ–æ–Ω—ñ
    if (usingCache) {
      setTimeout(() => {
        updateDataInBackground(fairs);
      }, 5000);
    }
    
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∏:', err);
    
    // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    if (vegetableLoader) {
      vegetableLoader.stop();
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    const loader = document.getElementById('map-loader');
    if (loader) {
      const loadingText = loader.querySelector('.loading-text');
      if (loadingText) {
        loadingText.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.';
        loadingText.style.color = '#FA5E5E';
      }
    }
  }
});